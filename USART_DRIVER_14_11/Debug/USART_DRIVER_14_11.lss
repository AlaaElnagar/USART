
USART_DRIVER_14_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000930  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000009a4  2**0
                  ALLOC
  2 .stab         00000bc4  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000914  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 04 	call	0x908	; 0x908 <main>
  74:	0c 94 96 04 	jmp	0x92c	; 0x92c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_VidSetPortDirection>:





void DIO_VidSetPortDirection( u8 Copy_U8Port, u8 Copy_U8Direction){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_VidSetPortDirection+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_VidSetPortDirection+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <DIO_VidSetPortDirection+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	6a 83       	std	Y+2, r22	; 0x02

	if (Copy_U8Direction==OUTPUT){
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	99 f5       	brne	.+102    	; 0xfa <DIO_VidSetPortDirection+0x7e>

		switch(Copy_U8Port){
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	28 2f       	mov	r18, r24
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	3e 83       	std	Y+6, r19	; 0x06
  9c:	2d 83       	std	Y+5, r18	; 0x05
  9e:	8d 81       	ldd	r24, Y+5	; 0x05
  a0:	9e 81       	ldd	r25, Y+6	; 0x06
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 05       	cpc	r25, r1
  a6:	d1 f0       	breq	.+52     	; 0xdc <DIO_VidSetPortDirection+0x60>
  a8:	2d 81       	ldd	r18, Y+5	; 0x05
  aa:	3e 81       	ldd	r19, Y+6	; 0x06
  ac:	22 30       	cpi	r18, 0x02	; 2
  ae:	31 05       	cpc	r19, r1
  b0:	2c f4       	brge	.+10     	; 0xbc <DIO_VidSetPortDirection+0x40>
  b2:	8d 81       	ldd	r24, Y+5	; 0x05
  b4:	9e 81       	ldd	r25, Y+6	; 0x06
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	61 f0       	breq	.+24     	; 0xd2 <DIO_VidSetPortDirection+0x56>
  ba:	50 c0       	rjmp	.+160    	; 0x15c <DIO_VidSetPortDirection+0xe0>
  bc:	2d 81       	ldd	r18, Y+5	; 0x05
  be:	3e 81       	ldd	r19, Y+6	; 0x06
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	81 f0       	breq	.+32     	; 0xe6 <DIO_VidSetPortDirection+0x6a>
  c6:	8d 81       	ldd	r24, Y+5	; 0x05
  c8:	9e 81       	ldd	r25, Y+6	; 0x06
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	81 f0       	breq	.+32     	; 0xf0 <DIO_VidSetPortDirection+0x74>
  d0:	45 c0       	rjmp	.+138    	; 0x15c <DIO_VidSetPortDirection+0xe0>

		case PORTA_NUM :		DDRA=0xff;	break;
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
  da:	40 c0       	rjmp	.+128    	; 0x15c <DIO_VidSetPortDirection+0xe0>
		case PORTB_NUM :		DDRB=0xff;  break;
  dc:	e7 e3       	ldi	r30, 0x37	; 55
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	80 83       	st	Z, r24
  e4:	3b c0       	rjmp	.+118    	; 0x15c <DIO_VidSetPortDirection+0xe0>
		case PORTC_NUM :		DDRC=0xff;; break;
  e6:	e4 e3       	ldi	r30, 0x34	; 52
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	80 83       	st	Z, r24
  ee:	36 c0       	rjmp	.+108    	; 0x15c <DIO_VidSetPortDirection+0xe0>
		case PORTD_NUM :		DDRD=0xff;  break;
  f0:	e1 e3       	ldi	r30, 0x31	; 49
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	80 83       	st	Z, r24
  f8:	31 c0       	rjmp	.+98     	; 0x15c <DIO_VidSetPortDirection+0xe0>


	}


	else if  (Copy_U8Direction==INPUT){
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	88 23       	and	r24, r24
  fe:	71 f5       	brne	.+92     	; 0x15c <DIO_VidSetPortDirection+0xe0>


		switch(Copy_U8Port){
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	3c 83       	std	Y+4, r19	; 0x04
 108:	2b 83       	std	Y+3, r18	; 0x03
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	9c 81       	ldd	r25, Y+4	; 0x04
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 05       	cpc	r25, r1
 112:	c9 f0       	breq	.+50     	; 0x146 <DIO_VidSetPortDirection+0xca>
 114:	2b 81       	ldd	r18, Y+3	; 0x03
 116:	3c 81       	ldd	r19, Y+4	; 0x04
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	2c f4       	brge	.+10     	; 0x128 <DIO_VidSetPortDirection+0xac>
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	9c 81       	ldd	r25, Y+4	; 0x04
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	61 f0       	breq	.+24     	; 0x13e <DIO_VidSetPortDirection+0xc2>
 126:	1a c0       	rjmp	.+52     	; 0x15c <DIO_VidSetPortDirection+0xe0>
 128:	2b 81       	ldd	r18, Y+3	; 0x03
 12a:	3c 81       	ldd	r19, Y+4	; 0x04
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	71 f0       	breq	.+28     	; 0x14e <DIO_VidSetPortDirection+0xd2>
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	9c 81       	ldd	r25, Y+4	; 0x04
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	91 05       	cpc	r25, r1
 13a:	69 f0       	breq	.+26     	; 0x156 <DIO_VidSetPortDirection+0xda>
 13c:	0f c0       	rjmp	.+30     	; 0x15c <DIO_VidSetPortDirection+0xe0>
		case PORTA_NUM :		DDRA=0x00; break;
 13e:	ea e3       	ldi	r30, 0x3A	; 58
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	10 82       	st	Z, r1
 144:	0b c0       	rjmp	.+22     	; 0x15c <DIO_VidSetPortDirection+0xe0>
		case PORTB_NUM :		DDRB=0x00; break;
 146:	e7 e3       	ldi	r30, 0x37	; 55
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	10 82       	st	Z, r1
 14c:	07 c0       	rjmp	.+14     	; 0x15c <DIO_VidSetPortDirection+0xe0>
		case PORTC_NUM :		DDRC=0x00; break;
 14e:	e4 e3       	ldi	r30, 0x34	; 52
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
 154:	03 c0       	rjmp	.+6      	; 0x15c <DIO_VidSetPortDirection+0xe0>
		case PORTD_NUM :		DDRD=0x00; break;
 156:	e1 e3       	ldi	r30, 0x31	; 49
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1

	}



}
 15c:	26 96       	adiw	r28, 0x06	; 6
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Value){
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <DIO_VidSetPortValue+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <DIO_VidSetPortValue+0x8>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8Port){
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	3c 83       	std	Y+4, r19	; 0x04
 186:	2b 83       	std	Y+3, r18	; 0x03
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	9c 81       	ldd	r25, Y+4	; 0x04
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 05       	cpc	r25, r1
 190:	d1 f0       	breq	.+52     	; 0x1c6 <DIO_VidSetPortValue+0x58>
 192:	2b 81       	ldd	r18, Y+3	; 0x03
 194:	3c 81       	ldd	r19, Y+4	; 0x04
 196:	22 30       	cpi	r18, 0x02	; 2
 198:	31 05       	cpc	r19, r1
 19a:	2c f4       	brge	.+10     	; 0x1a6 <DIO_VidSetPortValue+0x38>
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	9c 81       	ldd	r25, Y+4	; 0x04
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	61 f0       	breq	.+24     	; 0x1bc <DIO_VidSetPortValue+0x4e>
 1a4:	1e c0       	rjmp	.+60     	; 0x1e2 <DIO_VidSetPortValue+0x74>
 1a6:	2b 81       	ldd	r18, Y+3	; 0x03
 1a8:	3c 81       	ldd	r19, Y+4	; 0x04
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	31 05       	cpc	r19, r1
 1ae:	81 f0       	breq	.+32     	; 0x1d0 <DIO_VidSetPortValue+0x62>
 1b0:	8b 81       	ldd	r24, Y+3	; 0x03
 1b2:	9c 81       	ldd	r25, Y+4	; 0x04
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	91 05       	cpc	r25, r1
 1b8:	81 f0       	breq	.+32     	; 0x1da <DIO_VidSetPortValue+0x6c>
 1ba:	13 c0       	rjmp	.+38     	; 0x1e2 <DIO_VidSetPortValue+0x74>

		case PORTA_NUM :		PORTA=Copy_U8Value;				break;
 1bc:	eb e3       	ldi	r30, 0x3B	; 59
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	80 83       	st	Z, r24
 1c4:	0e c0       	rjmp	.+28     	; 0x1e2 <DIO_VidSetPortValue+0x74>
		case PORTB_NUM :		PORTB=Copy_U8Value; 		    break;
 1c6:	e8 e3       	ldi	r30, 0x38	; 56
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	80 83       	st	Z, r24
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <DIO_VidSetPortValue+0x74>
		case PORTC_NUM :		PORTC=Copy_U8Value;			    break;
 1d0:	e5 e3       	ldi	r30, 0x35	; 53
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	80 83       	st	Z, r24
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <DIO_VidSetPortValue+0x74>
		case PORTD_NUM :		PORTD=Copy_U8Value;			    break;
 1da:	e2 e3       	ldi	r30, 0x32	; 50
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	80 83       	st	Z, r24

		}



}
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	cf 91       	pop	r28
 1ec:	df 91       	pop	r29
 1ee:	08 95       	ret

000001f0 <DIO_VidSetPinDirection>:


void DIO_VidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8PinNum,u8 Copy_U8Direction){
 1f0:	df 93       	push	r29
 1f2:	cf 93       	push	r28
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	27 97       	sbiw	r28, 0x07	; 7
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	6a 83       	std	Y+2, r22	; 0x02
 208:	4b 83       	std	Y+3, r20	; 0x03

	if (Copy_U8Direction==OUTPUT){
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	09 f0       	breq	.+2      	; 0x212 <DIO_VidSetPinDirection+0x22>
 210:	6f c0       	rjmp	.+222    	; 0x2f0 <DIO_VidSetPinDirection+0x100>

		switch(Copy_U8Port){
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	3f 83       	std	Y+7, r19	; 0x07
 21a:	2e 83       	std	Y+6, r18	; 0x06
 21c:	8e 81       	ldd	r24, Y+6	; 0x06
 21e:	9f 81       	ldd	r25, Y+7	; 0x07
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 05       	cpc	r25, r1
 224:	49 f1       	breq	.+82     	; 0x278 <DIO_VidSetPinDirection+0x88>
 226:	2e 81       	ldd	r18, Y+6	; 0x06
 228:	3f 81       	ldd	r19, Y+7	; 0x07
 22a:	22 30       	cpi	r18, 0x02	; 2
 22c:	31 05       	cpc	r19, r1
 22e:	2c f4       	brge	.+10     	; 0x23a <DIO_VidSetPinDirection+0x4a>
 230:	8e 81       	ldd	r24, Y+6	; 0x06
 232:	9f 81       	ldd	r25, Y+7	; 0x07
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	61 f0       	breq	.+24     	; 0x250 <DIO_VidSetPinDirection+0x60>
 238:	d2 c0       	rjmp	.+420    	; 0x3de <DIO_VidSetPinDirection+0x1ee>
 23a:	2e 81       	ldd	r18, Y+6	; 0x06
 23c:	3f 81       	ldd	r19, Y+7	; 0x07
 23e:	22 30       	cpi	r18, 0x02	; 2
 240:	31 05       	cpc	r19, r1
 242:	71 f1       	breq	.+92     	; 0x2a0 <DIO_VidSetPinDirection+0xb0>
 244:	8e 81       	ldd	r24, Y+6	; 0x06
 246:	9f 81       	ldd	r25, Y+7	; 0x07
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	91 05       	cpc	r25, r1
 24c:	e9 f1       	breq	.+122    	; 0x2c8 <DIO_VidSetPinDirection+0xd8>
 24e:	c7 c0       	rjmp	.+398    	; 0x3de <DIO_VidSetPinDirection+0x1ee>

		case PORTA_NUM :		SET_BIT(DDRA,Copy_U8PinNum);	break;
 250:	aa e3       	ldi	r26, 0x3A	; 58
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	ea e3       	ldi	r30, 0x3A	; 58
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	8a 81       	ldd	r24, Y+2	; 0x02
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_VidSetPinDirection+0x7e>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_VidSetPinDirection+0x7a>
 272:	84 2b       	or	r24, r20
 274:	8c 93       	st	X, r24
 276:	b3 c0       	rjmp	.+358    	; 0x3de <DIO_VidSetPinDirection+0x1ee>
		case PORTB_NUM :		SET_BIT(DDRB,Copy_U8PinNum);	break;
 278:	a7 e3       	ldi	r26, 0x37	; 55
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e7 e3       	ldi	r30, 0x37	; 55
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_VidSetPinDirection+0xa6>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_VidSetPinDirection+0xa2>
 29a:	84 2b       	or	r24, r20
 29c:	8c 93       	st	X, r24
 29e:	9f c0       	rjmp	.+318    	; 0x3de <DIO_VidSetPinDirection+0x1ee>
		case PORTC_NUM :		SET_BIT(DDRC,Copy_U8PinNum);	break;
 2a0:	a4 e3       	ldi	r26, 0x34	; 52
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	e4 e3       	ldi	r30, 0x34	; 52
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	48 2f       	mov	r20, r24
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 2e       	mov	r0, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_VidSetPinDirection+0xce>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_VidSetPinDirection+0xca>
 2c2:	84 2b       	or	r24, r20
 2c4:	8c 93       	st	X, r24
 2c6:	8b c0       	rjmp	.+278    	; 0x3de <DIO_VidSetPinDirection+0x1ee>
		case PORTD_NUM :		SET_BIT(DDRD,Copy_U8PinNum);	break;
 2c8:	a1 e3       	ldi	r26, 0x31	; 49
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e1 e3       	ldi	r30, 0x31	; 49
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	48 2f       	mov	r20, r24
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	28 2f       	mov	r18, r24
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_VidSetPinDirection+0xf6>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_VidSetPinDirection+0xf2>
 2ea:	84 2b       	or	r24, r20
 2ec:	8c 93       	st	X, r24
 2ee:	77 c0       	rjmp	.+238    	; 0x3de <DIO_VidSetPinDirection+0x1ee>


	}


	else if  (Copy_U8Direction==INPUT){
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	88 23       	and	r24, r24
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <DIO_VidSetPinDirection+0x108>
 2f6:	73 c0       	rjmp	.+230    	; 0x3de <DIO_VidSetPinDirection+0x1ee>


		switch(Copy_U8Port){
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	3d 83       	std	Y+5, r19	; 0x05
 300:	2c 83       	std	Y+4, r18	; 0x04
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	9d 81       	ldd	r25, Y+5	; 0x05
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	59 f1       	breq	.+86     	; 0x362 <DIO_VidSetPinDirection+0x172>
 30c:	2c 81       	ldd	r18, Y+4	; 0x04
 30e:	3d 81       	ldd	r19, Y+5	; 0x05
 310:	22 30       	cpi	r18, 0x02	; 2
 312:	31 05       	cpc	r19, r1
 314:	2c f4       	brge	.+10     	; 0x320 <DIO_VidSetPinDirection+0x130>
 316:	8c 81       	ldd	r24, Y+4	; 0x04
 318:	9d 81       	ldd	r25, Y+5	; 0x05
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	69 f0       	breq	.+26     	; 0x338 <DIO_VidSetPinDirection+0x148>
 31e:	5f c0       	rjmp	.+190    	; 0x3de <DIO_VidSetPinDirection+0x1ee>
 320:	2c 81       	ldd	r18, Y+4	; 0x04
 322:	3d 81       	ldd	r19, Y+5	; 0x05
 324:	22 30       	cpi	r18, 0x02	; 2
 326:	31 05       	cpc	r19, r1
 328:	89 f1       	breq	.+98     	; 0x38c <DIO_VidSetPinDirection+0x19c>
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	9d 81       	ldd	r25, Y+5	; 0x05
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	91 05       	cpc	r25, r1
 332:	09 f4       	brne	.+2      	; 0x336 <DIO_VidSetPinDirection+0x146>
 334:	40 c0       	rjmp	.+128    	; 0x3b6 <DIO_VidSetPinDirection+0x1c6>
 336:	53 c0       	rjmp	.+166    	; 0x3de <DIO_VidSetPinDirection+0x1ee>
		case PORTA_NUM :		CLEAR_BIT(DDRA,Copy_U8PinNum);	break;
 338:	aa e3       	ldi	r26, 0x3A	; 58
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	ea e3       	ldi	r30, 0x3A	; 58
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	48 2f       	mov	r20, r24
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 2e       	mov	r0, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_VidSetPinDirection+0x166>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	0a 94       	dec	r0
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_VidSetPinDirection+0x162>
 35a:	80 95       	com	r24
 35c:	84 23       	and	r24, r20
 35e:	8c 93       	st	X, r24
 360:	3e c0       	rjmp	.+124    	; 0x3de <DIO_VidSetPinDirection+0x1ee>
		case PORTB_NUM :		CLEAR_BIT(DDRB,Copy_U8PinNum);	break;
 362:	a7 e3       	ldi	r26, 0x37	; 55
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e7 e3       	ldi	r30, 0x37	; 55
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 2e       	mov	r0, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_VidSetPinDirection+0x190>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_VidSetPinDirection+0x18c>
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	8c 93       	st	X, r24
 38a:	29 c0       	rjmp	.+82     	; 0x3de <DIO_VidSetPinDirection+0x1ee>
		case PORTC_NUM :		CLEAR_BIT(DDRC,Copy_U8PinNum);	break;
 38c:	a4 e3       	ldi	r26, 0x34	; 52
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e4 e3       	ldi	r30, 0x34	; 52
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_VidSetPinDirection+0x1ba>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_VidSetPinDirection+0x1b6>
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	8c 93       	st	X, r24
 3b4:	14 c0       	rjmp	.+40     	; 0x3de <DIO_VidSetPinDirection+0x1ee>
		case PORTD_NUM :		CLEAR_BIT(DDRD,Copy_U8PinNum);	break;
 3b6:	a1 e3       	ldi	r26, 0x31	; 49
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	e1 e3       	ldi	r30, 0x31	; 49
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_VidSetPinDirection+0x1e4>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_VidSetPinDirection+0x1e0>
 3d8:	80 95       	com	r24
 3da:	84 23       	and	r24, r20
 3dc:	8c 93       	st	X, r24
		}

	}

}
 3de:	27 96       	adiw	r28, 0x07	; 7
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	cf 91       	pop	r28
 3ec:	df 91       	pop	r29
 3ee:	08 95       	ret

000003f0 <DIO_VidSetPinValue>:



void DIO_VidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8PinValue){
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	27 97       	sbiw	r28, 0x07	; 7
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	89 83       	std	Y+1, r24	; 0x01
 406:	6a 83       	std	Y+2, r22	; 0x02
 408:	4b 83       	std	Y+3, r20	; 0x03
if (Copy_U8PinValue == HIGH){
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	09 f0       	breq	.+2      	; 0x412 <DIO_VidSetPinValue+0x22>
 410:	6f c0       	rjmp	.+222    	; 0x4f0 <DIO_VidSetPinValue+0x100>
	switch(Copy_U8Port){
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	3f 83       	std	Y+7, r19	; 0x07
 41a:	2e 83       	std	Y+6, r18	; 0x06
 41c:	8e 81       	ldd	r24, Y+6	; 0x06
 41e:	9f 81       	ldd	r25, Y+7	; 0x07
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	91 05       	cpc	r25, r1
 424:	49 f1       	breq	.+82     	; 0x478 <DIO_VidSetPinValue+0x88>
 426:	2e 81       	ldd	r18, Y+6	; 0x06
 428:	3f 81       	ldd	r19, Y+7	; 0x07
 42a:	22 30       	cpi	r18, 0x02	; 2
 42c:	31 05       	cpc	r19, r1
 42e:	2c f4       	brge	.+10     	; 0x43a <DIO_VidSetPinValue+0x4a>
 430:	8e 81       	ldd	r24, Y+6	; 0x06
 432:	9f 81       	ldd	r25, Y+7	; 0x07
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	61 f0       	breq	.+24     	; 0x450 <DIO_VidSetPinValue+0x60>
 438:	d2 c0       	rjmp	.+420    	; 0x5de <DIO_VidSetPinValue+0x1ee>
 43a:	2e 81       	ldd	r18, Y+6	; 0x06
 43c:	3f 81       	ldd	r19, Y+7	; 0x07
 43e:	22 30       	cpi	r18, 0x02	; 2
 440:	31 05       	cpc	r19, r1
 442:	71 f1       	breq	.+92     	; 0x4a0 <DIO_VidSetPinValue+0xb0>
 444:	8e 81       	ldd	r24, Y+6	; 0x06
 446:	9f 81       	ldd	r25, Y+7	; 0x07
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	91 05       	cpc	r25, r1
 44c:	e9 f1       	breq	.+122    	; 0x4c8 <DIO_VidSetPinValue+0xd8>
 44e:	c7 c0       	rjmp	.+398    	; 0x5de <DIO_VidSetPinValue+0x1ee>

		case PORTA_NUM :		SET_BIT(PORTA,Copy_U8Pin);	        	break;
 450:	ab e3       	ldi	r26, 0x3B	; 59
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	eb e3       	ldi	r30, 0x3B	; 59
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 2e       	mov	r0, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_VidSetPinValue+0x7e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_VidSetPinValue+0x7a>
 472:	84 2b       	or	r24, r20
 474:	8c 93       	st	X, r24
 476:	b3 c0       	rjmp	.+358    	; 0x5de <DIO_VidSetPinValue+0x1ee>
		case PORTB_NUM :		SET_BIT(PORTB,Copy_U8Pin); 		        break;
 478:	a8 e3       	ldi	r26, 0x38	; 56
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e8 e3       	ldi	r30, 0x38	; 56
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	48 2f       	mov	r20, r24
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 2e       	mov	r0, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_VidSetPinValue+0xa6>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_VidSetPinValue+0xa2>
 49a:	84 2b       	or	r24, r20
 49c:	8c 93       	st	X, r24
 49e:	9f c0       	rjmp	.+318    	; 0x5de <DIO_VidSetPinValue+0x1ee>
		case PORTC_NUM :		SET_BIT(PORTC,Copy_U8Pin);			    break;
 4a0:	a5 e3       	ldi	r26, 0x35	; 53
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e5 e3       	ldi	r30, 0x35	; 53
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	48 2f       	mov	r20, r24
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 2e       	mov	r0, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_VidSetPinValue+0xce>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_VidSetPinValue+0xca>
 4c2:	84 2b       	or	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	8b c0       	rjmp	.+278    	; 0x5de <DIO_VidSetPinValue+0x1ee>
		case PORTD_NUM :		SET_BIT(PORTD,Copy_U8Pin);			    break;
 4c8:	a2 e3       	ldi	r26, 0x32	; 50
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e2 e3       	ldi	r30, 0x32	; 50
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 2e       	mov	r0, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_VidSetPinValue+0xf6>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_VidSetPinValue+0xf2>
 4ea:	84 2b       	or	r24, r20
 4ec:	8c 93       	st	X, r24
 4ee:	77 c0       	rjmp	.+238    	; 0x5de <DIO_VidSetPinValue+0x1ee>

		}
}

else if  (Copy_U8PinValue == LOW){
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	88 23       	and	r24, r24
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <DIO_VidSetPinValue+0x108>
 4f6:	73 c0       	rjmp	.+230    	; 0x5de <DIO_VidSetPinValue+0x1ee>
	switch(Copy_U8Port){
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	3d 83       	std	Y+5, r19	; 0x05
 500:	2c 83       	std	Y+4, r18	; 0x04
 502:	8c 81       	ldd	r24, Y+4	; 0x04
 504:	9d 81       	ldd	r25, Y+5	; 0x05
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	91 05       	cpc	r25, r1
 50a:	59 f1       	breq	.+86     	; 0x562 <DIO_VidSetPinValue+0x172>
 50c:	2c 81       	ldd	r18, Y+4	; 0x04
 50e:	3d 81       	ldd	r19, Y+5	; 0x05
 510:	22 30       	cpi	r18, 0x02	; 2
 512:	31 05       	cpc	r19, r1
 514:	2c f4       	brge	.+10     	; 0x520 <DIO_VidSetPinValue+0x130>
 516:	8c 81       	ldd	r24, Y+4	; 0x04
 518:	9d 81       	ldd	r25, Y+5	; 0x05
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	69 f0       	breq	.+26     	; 0x538 <DIO_VidSetPinValue+0x148>
 51e:	5f c0       	rjmp	.+190    	; 0x5de <DIO_VidSetPinValue+0x1ee>
 520:	2c 81       	ldd	r18, Y+4	; 0x04
 522:	3d 81       	ldd	r19, Y+5	; 0x05
 524:	22 30       	cpi	r18, 0x02	; 2
 526:	31 05       	cpc	r19, r1
 528:	89 f1       	breq	.+98     	; 0x58c <DIO_VidSetPinValue+0x19c>
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	9d 81       	ldd	r25, Y+5	; 0x05
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	91 05       	cpc	r25, r1
 532:	09 f4       	brne	.+2      	; 0x536 <DIO_VidSetPinValue+0x146>
 534:	40 c0       	rjmp	.+128    	; 0x5b6 <DIO_VidSetPinValue+0x1c6>
 536:	53 c0       	rjmp	.+166    	; 0x5de <DIO_VidSetPinValue+0x1ee>

		case PORTA_NUM :		CLEAR_BIT(PORTA,Copy_U8Pin);	        break;
 538:	ab e3       	ldi	r26, 0x3B	; 59
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	eb e3       	ldi	r30, 0x3B	; 59
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	48 2f       	mov	r20, r24
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 2e       	mov	r0, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_VidSetPinValue+0x166>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_VidSetPinValue+0x162>
 55a:	80 95       	com	r24
 55c:	84 23       	and	r24, r20
 55e:	8c 93       	st	X, r24
 560:	3e c0       	rjmp	.+124    	; 0x5de <DIO_VidSetPinValue+0x1ee>
		case PORTB_NUM :		CLEAR_BIT(PORTB,Copy_U8Pin); 		    break;
 562:	a8 e3       	ldi	r26, 0x38	; 56
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	e8 e3       	ldi	r30, 0x38	; 56
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	48 2f       	mov	r20, r24
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 2e       	mov	r0, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_VidSetPinValue+0x190>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_VidSetPinValue+0x18c>
 584:	80 95       	com	r24
 586:	84 23       	and	r24, r20
 588:	8c 93       	st	X, r24
 58a:	29 c0       	rjmp	.+82     	; 0x5de <DIO_VidSetPinValue+0x1ee>
		case PORTC_NUM :		CLEAR_BIT(PORTC,Copy_U8Pin);			break;
 58c:	a5 e3       	ldi	r26, 0x35	; 53
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	e5 e3       	ldi	r30, 0x35	; 53
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	48 2f       	mov	r20, r24
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	28 2f       	mov	r18, r24
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 2e       	mov	r0, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_VidSetPinValue+0x1ba>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_VidSetPinValue+0x1b6>
 5ae:	80 95       	com	r24
 5b0:	84 23       	and	r24, r20
 5b2:	8c 93       	st	X, r24
 5b4:	14 c0       	rjmp	.+40     	; 0x5de <DIO_VidSetPinValue+0x1ee>
		case PORTD_NUM :		CLEAR_BIT(PORTD,Copy_U8Pin);			break;
 5b6:	a2 e3       	ldi	r26, 0x32	; 50
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e2 e3       	ldi	r30, 0x32	; 50
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 2e       	mov	r0, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_VidSetPinValue+0x1e4>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_VidSetPinValue+0x1e0>
 5d8:	80 95       	com	r24
 5da:	84 23       	and	r24, r20
 5dc:	8c 93       	st	X, r24

		}
}
}
 5de:	27 96       	adiw	r28, 0x07	; 7
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	cf 91       	pop	r28
 5ec:	df 91       	pop	r29
 5ee:	08 95       	ret

000005f0 <DIO_VidGetPinValue>:





u8 DIO_VidGetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin){
 5f0:	df 93       	push	r29
 5f2:	cf 93       	push	r28
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <DIO_VidGetPinValue+0x6>
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <DIO_VidGetPinValue+0x8>
 5f8:	0f 92       	push	r0
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	8a 83       	std	Y+2, r24	; 0x02
 600:	6b 83       	std	Y+3, r22	; 0x03
u8 Lcal_U8PinResult=0;
 602:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_U8Port){
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	3d 83       	std	Y+5, r19	; 0x05
 60c:	2c 83       	std	Y+4, r18	; 0x04
 60e:	4c 81       	ldd	r20, Y+4	; 0x04
 610:	5d 81       	ldd	r21, Y+5	; 0x05
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	51 05       	cpc	r21, r1
 616:	41 f1       	breq	.+80     	; 0x668 <DIO_VidGetPinValue+0x78>
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	9d 81       	ldd	r25, Y+5	; 0x05
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	34 f4       	brge	.+12     	; 0x62e <DIO_VidGetPinValue+0x3e>
 622:	2c 81       	ldd	r18, Y+4	; 0x04
 624:	3d 81       	ldd	r19, Y+5	; 0x05
 626:	21 15       	cp	r18, r1
 628:	31 05       	cpc	r19, r1
 62a:	61 f0       	breq	.+24     	; 0x644 <DIO_VidGetPinValue+0x54>
 62c:	52 c0       	rjmp	.+164    	; 0x6d2 <DIO_VidGetPinValue+0xe2>
 62e:	4c 81       	ldd	r20, Y+4	; 0x04
 630:	5d 81       	ldd	r21, Y+5	; 0x05
 632:	42 30       	cpi	r20, 0x02	; 2
 634:	51 05       	cpc	r21, r1
 636:	51 f1       	breq	.+84     	; 0x68c <DIO_VidGetPinValue+0x9c>
 638:	8c 81       	ldd	r24, Y+4	; 0x04
 63a:	9d 81       	ldd	r25, Y+5	; 0x05
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	91 05       	cpc	r25, r1
 640:	b9 f1       	breq	.+110    	; 0x6b0 <DIO_VidGetPinValue+0xc0>
 642:	47 c0       	rjmp	.+142    	; 0x6d2 <DIO_VidGetPinValue+0xe2>

			case PORTA_NUM :		Lcal_U8PinResult=GET_BIT(PINA,Copy_U8Pin);	        break;
 644:	e9 e3       	ldi	r30, 0x39	; 57
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	28 2f       	mov	r18, r24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	8b 81       	ldd	r24, Y+3	; 0x03
 650:	88 2f       	mov	r24, r24
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	a9 01       	movw	r20, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_VidGetPinValue+0x6c>
 658:	55 95       	asr	r21
 65a:	47 95       	ror	r20
 65c:	8a 95       	dec	r24
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_VidGetPinValue+0x68>
 660:	ca 01       	movw	r24, r20
 662:	81 70       	andi	r24, 0x01	; 1
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	35 c0       	rjmp	.+106    	; 0x6d2 <DIO_VidGetPinValue+0xe2>
			case PORTB_NUM :		Lcal_U8PinResult=GET_BIT(PINB,Copy_U8Pin); 		    break;
 668:	e6 e3       	ldi	r30, 0x36	; 54
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	a9 01       	movw	r20, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_VidGetPinValue+0x90>
 67c:	55 95       	asr	r21
 67e:	47 95       	ror	r20
 680:	8a 95       	dec	r24
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_VidGetPinValue+0x8c>
 684:	ca 01       	movw	r24, r20
 686:	81 70       	andi	r24, 0x01	; 1
 688:	89 83       	std	Y+1, r24	; 0x01
 68a:	23 c0       	rjmp	.+70     	; 0x6d2 <DIO_VidGetPinValue+0xe2>
			case PORTC_NUM :		Lcal_U8PinResult=GET_BIT(PINC,Copy_U8Pin);			break;
 68c:	e3 e3       	ldi	r30, 0x33	; 51
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	88 2f       	mov	r24, r24
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	a9 01       	movw	r20, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_VidGetPinValue+0xb4>
 6a0:	55 95       	asr	r21
 6a2:	47 95       	ror	r20
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_VidGetPinValue+0xb0>
 6a8:	ca 01       	movw	r24, r20
 6aa:	81 70       	andi	r24, 0x01	; 1
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	11 c0       	rjmp	.+34     	; 0x6d2 <DIO_VidGetPinValue+0xe2>
			case PORTD_NUM :		Lcal_U8PinResult=GET_BIT(PIND,Copy_U8Pin);			break;
 6b0:	e0 e3       	ldi	r30, 0x30	; 48
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	28 2f       	mov	r18, r24
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	8b 81       	ldd	r24, Y+3	; 0x03
 6bc:	88 2f       	mov	r24, r24
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	a9 01       	movw	r20, r18
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_VidGetPinValue+0xd8>
 6c4:	55 95       	asr	r21
 6c6:	47 95       	ror	r20
 6c8:	8a 95       	dec	r24
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_VidGetPinValue+0xd4>
 6cc:	ca 01       	movw	r24, r20
 6ce:	81 70       	andi	r24, 0x01	; 1
 6d0:	89 83       	std	Y+1, r24	; 0x01

			}


return(Lcal_U8PinResult);
 6d2:	89 81       	ldd	r24, Y+1	; 0x01


}
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	cf 91       	pop	r28
 6e0:	df 91       	pop	r29
 6e2:	08 95       	ret

000006e4 <USART_VidInit>:

 [Returns]			None

 * ********************************************************************************************/

void USART_VidInit(){
 6e4:	df 93       	push	r29
 6e6:	cf 93       	push	r28
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
	/*setting rx and tx pins */
	DIO_VidSetPinDirection(PORTD_NUM,0,0);
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTD_NUM,1,1);
 6f6:	83 e0       	ldi	r24, 0x03	; 3
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_VidSetPinDirection>
	/*setting boad rate*/
	/*This bit selects between accessing the UBRRH or the UCSRC Register. It is read as zero when
	reading UBRRH. The URSEL must be zero when writing the UBRRH.*/
	UBRRL=(0<<URSEL_BIT);
 700:	e9 e2       	ldi	r30, 0x29	; 41
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	10 82       	st	Z, r1
	UBRRL = BOADRATE_L_REG;
 706:	e9 e2       	ldi	r30, 0x29	; 41
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	83 e3       	ldi	r24, 0x33	; 51
 70c:	80 83       	st	Z, r24

	/*SETTING A*/
	UBRRH = BOADRATE_M_REG;
 70e:	e0 e4       	ldi	r30, 0x40	; 64
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	10 82       	st	Z, r1
#elif CHARACTER_SIZE == SEVEN_BIT
	UCSRB_Help |=  (0<<UCSZ2_BIT);       UCSRc_Help |=  (1<<UCSZ1_BIT) |  (0<<UCSZ0_BIT)   ;
#elif CHARACTER_SIZE == EIGHT_BIT
	UCSRB_Help |=  (0<<UCSZ2_BIT);       UCSRc_Help |=  (1<<UCSZ1_BIT) |  (1<<UCSZ0_BIT)   ;
#elif CHARACTER_SIZE == NINE_BIT
	UCSRB_Help |=  (1<<UCSZ2_BIT);       UCSRc_Help |=  (1<<UCSZ1_BIT) |  (0<<UCSZ0_BIT)   ;
 714:	80 91 61 00 	lds	r24, 0x0061
 718:	84 60       	ori	r24, 0x04	; 4
 71a:	80 93 61 00 	sts	0x0061, r24
 71e:	80 91 62 00 	lds	r24, 0x0062
 722:	84 60       	ori	r24, 0x04	; 4
 724:	80 93 62 00 	sts	0x0062, r24



#elif  (OPERATION ==ASYNCHRONOUS) &&(TRANSMISSION_SPEED==SINGLE)

 						UCSRc_Help |= (0<<UMSEL_BIT) ;							UCSRc_Help |= (0<<U2X_BIT);
 728:	80 91 62 00 	lds	r24, 0x0062
 72c:	80 93 62 00 	sts	0x0062, r24
 730:	80 91 62 00 	lds	r24, 0x0062
 734:	80 93 62 00 	sts	0x0062, r24
 						UCSRc_Help |= (0<<UMSEL_BIT) ;							UCSRc_Help |= (1<<U2X_BIT);

#endif

#if PARIT_MODE == DISABLED
 						UCSRB_Help |= (0<<UPM1_BIT) | (0<<UPM0_BIT) ;
 738:	80 91 61 00 	lds	r24, 0x0061
 73c:	80 93 61 00 	sts	0x0061, r24
#if STOP_BIT_SELECT == ONE_BIT_STOP

 						UCSRB_Help |= (0<<USBS_BIT)  ;
#elif STOP_BIT_SELECT == TWO_BIT_STOP

 						UCSRB_Help |= (1<<USBS_BIT)  ;
 740:	80 91 61 00 	lds	r24, 0x0061
 744:	88 60       	ori	r24, 0x08	; 8
 746:	80 93 61 00 	sts	0x0061, r24
#endif

 					/*MANUFACTURURE INSTRUCTION DONT WITE IN UCSRB OR UCSRC BIT BY BIT */

/*ENABLE RECIEV AND TRANSMITTER 4,3*/
UCSRB_Help |= (1<<RXEN_BIT) | (1<<TXEN_BIT) ;
 74a:	80 91 61 00 	lds	r24, 0x0061
 74e:	88 61       	ori	r24, 0x18	; 24
 750:	80 93 61 00 	sts	0x0061, r24

UCSRB=UCSRB_Help;
 754:	ea e2       	ldi	r30, 0x2A	; 42
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 91 61 00 	lds	r24, 0x0061
 75c:	80 83       	st	Z, r24
/*The URSEL must be one  when writing the UCSRC.*/
UCSRc_Help |= (1<<URSEL_BIT);
 75e:	80 91 62 00 	lds	r24, 0x0062
 762:	80 68       	ori	r24, 0x80	; 128
 764:	80 93 62 00 	sts	0x0062, r24
UCSRC =  UCSRc_Help ;
 768:	e0 e4       	ldi	r30, 0x40	; 64
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 91 62 00 	lds	r24, 0x0062
 770:	80 83       	st	Z, r24
//UCSRB = 0b00011000;

//UCSRC = 0b10000110;


}
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	08 95       	ret

00000778 <USART_VidTransmit>:

 * ********************************************************************************************/



void USART_VidTransmit(u16 Copy_U16Data){
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	00 d0       	rcall	.+0      	; 0x77e <USART_VidTransmit+0x6>
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
 782:	9a 83       	std	Y+2, r25	; 0x02
 784:	89 83       	std	Y+1, r24	; 0x01

#ifdef NINE_BIT_FLAG
	while (!GET_BIT(UCSRA,UDRE_BIT) );
 786:	eb e2       	ldi	r30, 0x2B	; 43
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	82 95       	swap	r24
 78e:	86 95       	lsr	r24
 790:	87 70       	andi	r24, 0x07	; 7
 792:	88 23       	and	r24, r24
 794:	c1 f3       	breq	.-16     	; 0x786 <USART_VidTransmit+0xe>
/*The nine's bit must be encodded first */
	UCSRB |=  (	GET_BIT	(Copy_U16Data,8)<<0		);
 796:	aa e2       	ldi	r26, 0x2A	; 42
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	ea e2       	ldi	r30, 0x2A	; 42
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	20 81       	ld	r18, Z
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	9a 81       	ldd	r25, Y+2	; 0x02
 7a4:	89 2f       	mov	r24, r25
 7a6:	99 27       	eor	r25, r25
 7a8:	81 70       	andi	r24, 0x01	; 1
 7aa:	82 2b       	or	r24, r18
 7ac:	8c 93       	st	X, r24
	UDR =  (u8)Copy_U16Data;
 7ae:	ec e2       	ldi	r30, 0x2C	; 44
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	80 83       	st	Z, r24
	u8 Copy_U8Data = (u8)Copy_U16Data   ;

	UDR = Copy_U8Data;
#endif

}
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	cf 91       	pop	r28
 7bc:	df 91       	pop	r29
 7be:	08 95       	ret

000007c0 <USART_VidRecive>:

 [Returns]			UDR

 * ********************************************************************************************/

u16 USART_VidRecive(){
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	00 d0       	rcall	.+0      	; 0x7c6 <USART_VidRecive+0x6>
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62

#ifdef  NINE_BIT_FLAG
	while (!GET_BIT(UCSRA,RXCIE_BIT) );
 7ca:	eb e2       	ldi	r30, 0x2B	; 43
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	88 23       	and	r24, r24
 7d2:	dc f7       	brge	.-10     	; 0x7ca <USART_VidRecive+0xa>

u16 UDR_U16Copy =0;
 7d4:	1a 82       	std	Y+2, r1	; 0x02
 7d6:	19 82       	std	Y+1, r1	; 0x01
UDR_U16Copy |= ( GET_BIT(UCSRB,RXB8_BIT)<< 8) |(UDR)  ;
 7d8:	ea e2       	ldi	r30, 0x2A	; 42
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	86 95       	lsr	r24
 7e0:	88 2f       	mov	r24, r24
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	9c 01       	movw	r18, r24
 7e6:	20 70       	andi	r18, 0x00	; 0
 7e8:	31 70       	andi	r19, 0x01	; 1
 7ea:	ec e2       	ldi	r30, 0x2C	; 44
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	88 2f       	mov	r24, r24
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	82 2b       	or	r24, r18
 7f6:	93 2b       	or	r25, r19
 7f8:	9c 01       	movw	r18, r24
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	9a 81       	ldd	r25, Y+2	; 0x02
 7fe:	82 2b       	or	r24, r18
 800:	93 2b       	or	r25, r19
 802:	9a 83       	std	Y+2, r25	; 0x02
 804:	89 83       	std	Y+1, r24	; 0x01

return (UDR_U16Copy);
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	9a 81       	ldd	r25, Y+2	; 0x02

return(	UDR ) ;

#endif

}
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	cf 91       	pop	r28
 810:	df 91       	pop	r29
 812:	08 95       	ret

00000814 <USART_VidSendAdressMPCM>:




/*Sending address incase of MPCM INCASE OF 9 BIT MODE MASTER MODE  */
void USART_VidSendAdressMPCM(u16 Copy_U16Adress){
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	00 d0       	rcall	.+0      	; 0x81a <USART_VidSendAdressMPCM+0x6>
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
 81e:	9a 83       	std	Y+2, r25	; 0x02
 820:	89 83       	std	Y+1, r24	; 0x01
#if 	CHARACTER_SIZE 	==  NINE_BIT
	SET_BIT(UCSRB,TXB8_BIT);
 822:	aa e2       	ldi	r26, 0x2A	; 42
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	ea e2       	ldi	r30, 0x2A	; 42
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	81 60       	ori	r24, 0x01	; 1
 82e:	8c 93       	st	X, r24
#endif
	/*traying to use 5:8 bit but ask in this point?????????????*/

	USART_VidTransmit(Copy_U16Adress);
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	9a 81       	ldd	r25, Y+2	; 0x02
 834:	0e 94 bc 03 	call	0x778	; 0x778 <USART_VidTransmit>

}
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	cf 91       	pop	r28
 83e:	df 91       	pop	r29
 840:	08 95       	ret

00000842 <USART_VidSendDataMPCM>:





void USART_VidSendDataMPCM(u16 Copy_U16Data){
 842:	df 93       	push	r29
 844:	cf 93       	push	r28
 846:	00 d0       	rcall	.+0      	; 0x848 <USART_VidSendDataMPCM+0x6>
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	9a 83       	std	Y+2, r25	; 0x02
 84e:	89 83       	std	Y+1, r24	; 0x01
#if 	CHARACTER_SIZE 	==  NINE_BIT
	CLEAR_BIT(UCSRB,TXB8_BIT);
 850:	aa e2       	ldi	r26, 0x2A	; 42
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	ea e2       	ldi	r30, 0x2A	; 42
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	8e 7f       	andi	r24, 0xFE	; 254
 85c:	8c 93       	st	X, r24
/*#ELIF 	/*traying to use 5:8 bit but ask in this point?????????????*/
#endif
	USART_VidTransmit(Copy_U16Data);
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	9a 81       	ldd	r25, Y+2	; 0x02
 862:	0e 94 bc 03 	call	0x778	; 0x778 <USART_VidTransmit>
}
 866:	0f 90       	pop	r0
 868:	0f 90       	pop	r0
 86a:	cf 91       	pop	r28
 86c:	df 91       	pop	r29
 86e:	08 95       	ret

00000870 <USART_VidReciveMPCM>:

/*ReCIVING DATA From other MCUS */
u8 Global_U8SwitchingFlag=0;

u16 USART_VidReciveMPCM(){
 870:	df 93       	push	r29
 872:	cf 93       	push	r28
 874:	00 d0       	rcall	.+0      	; 0x876 <USART_VidReciveMPCM+0x6>
 876:	00 d0       	rcall	.+0      	; 0x878 <USART_VidReciveMPCM+0x8>
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
	/**BACK IN  multi processor reciving mode If the stop address recived*/
	if (USART_VidRecive() == MCU1STOPADDRESS){ Global_U8SwitchingFlag = 0;SET_BIT(UCSRA,MPCM_BIT);return (0); }
 87c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_VidRecive>
 880:	8b 30       	cpi	r24, 0x0B	; 11
 882:	91 05       	cpc	r25, r1
 884:	61 f4       	brne	.+24     	; 0x89e <USART_VidReciveMPCM+0x2e>
 886:	10 92 60 00 	sts	0x0060, r1
 88a:	ab e2       	ldi	r26, 0x2B	; 43
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	eb e2       	ldi	r30, 0x2B	; 43
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	81 60       	ori	r24, 0x01	; 1
 896:	8c 93       	st	X, r24
 898:	1c 82       	std	Y+4, r1	; 0x04
 89a:	1b 82       	std	Y+3, r1	; 0x03
 89c:	2c c0       	rjmp	.+88     	; 0x8f6 <USART_VidReciveMPCM+0x86>

	/**enable multi processor reciving mode if the start address recived */
	else if (	(USART_VidRecive()==MCU1STARTADDRESS) | (Global_U8SwitchingFlag ==1 )){
 89e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_VidRecive>
 8a2:	1a 82       	std	Y+2, r1	; 0x02
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	91 05       	cpc	r25, r1
 8a8:	11 f4       	brne	.+4      	; 0x8ae <USART_VidReciveMPCM+0x3e>
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	8a 83       	std	Y+2, r24	; 0x02
 8ae:	80 91 60 00 	lds	r24, 0x0060
 8b2:	19 82       	std	Y+1, r1	; 0x01
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	11 f4       	brne	.+4      	; 0x8bc <USART_VidReciveMPCM+0x4c>
 8b8:	91 e0       	ldi	r25, 0x01	; 1
 8ba:	99 83       	std	Y+1, r25	; 0x01
 8bc:	8a 81       	ldd	r24, Y+2	; 0x02
 8be:	99 81       	ldd	r25, Y+1	; 0x01
 8c0:	89 2b       	or	r24, r25
 8c2:	88 23       	and	r24, r24
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <USART_VidReciveMPCM+0x74>
	/*start recive all the time */
		CLEAR_BIT(UCSRA,MPCM_BIT);
 8c6:	ab e2       	ldi	r26, 0x2B	; 43
 8c8:	b0 e0       	ldi	r27, 0x00	; 0
 8ca:	eb e2       	ldi	r30, 0x2B	; 43
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	8e 7f       	andi	r24, 0xFE	; 254
 8d2:	8c 93       	st	X, r24
		Global_U8SwitchingFlag =1;
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	80 93 60 00 	sts	0x0060, r24
		/*excute specific task based on USART_VidRecive()*/
		return (USART_VidRecive());
 8da:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_VidRecive>
 8de:	9c 83       	std	Y+4, r25	; 0x04
 8e0:	8b 83       	std	Y+3, r24	; 0x03
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <USART_VidReciveMPCM+0x86>

	}
	/*wait as slave until your address come */
	else{
		SET_BIT(UCSRA,MPCM_BIT);
 8e4:	ab e2       	ldi	r26, 0x2B	; 43
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	eb e2       	ldi	r30, 0x2B	; 43
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	81 60       	ori	r24, 0x01	; 1
 8f0:	8c 93       	st	X, r24
		return (0);
 8f2:	1c 82       	std	Y+4, r1	; 0x04
 8f4:	1b 82       	std	Y+3, r1	; 0x03
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	9c 81       	ldd	r25, Y+4	; 0x04
	}

}
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	0f 90       	pop	r0
 900:	0f 90       	pop	r0
 902:	cf 91       	pop	r28
 904:	df 91       	pop	r29
 906:	08 95       	ret

00000908 <main>:
#include "DIO_Private.h"
#include "DIO_Configure.h"
#include "DIO_reference.h"
#include "USART_Interface.h"

int main (){
 908:	df 93       	push	r29
 90a:	cf 93       	push	r28
 90c:	0f 92       	push	r0
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
u8 x=0;
 912:	19 82       	std	Y+1, r1	; 0x01

DIO_VidSetPinDirection(PORTA_NUM,7,1);
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	67 e0       	ldi	r22, 0x07	; 7
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_VidSetPinDirection>




	USART_VidInit();
 91e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <USART_VidInit>

/*master section*/
	while(1){

	USART_VidTransmit(USART_VidRecive());
 922:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_VidRecive>
 926:	0e 94 bc 03 	call	0x778	; 0x778 <USART_VidTransmit>
 92a:	fb cf       	rjmp	.-10     	; 0x922 <main+0x1a>

0000092c <_exit>:
 92c:	f8 94       	cli

0000092e <__stop_program>:
 92e:	ff cf       	rjmp	.-2      	; 0x92e <__stop_program>
